name: Test Action

on:
  # Test on push to task files
  push:
    paths:
      - '.kiro/specs/**/tasks.md'
      - 'src/**'
      - 'action.yml'
      - '.github/workflows/test-action.yml'
  
  # Test on pull requests
  pull_request:
    paths:
      - '.kiro/specs/**/tasks.md'
      - 'src/**'
      - 'action.yml'
      - '.github/workflows/test-action.yml'
  
  # Allow manual testing
  workflow_dispatch:
    inputs:
      test_scenario:
        description: 'Test scenario to run'
        required: false
        default: 'standard'
        type: choice
        options:
          - standard
          - force_commit
          - dry_run

jobs:
  test-action-standard:
    name: Test Action - Standard Flow
    runs-on: ubuntu-latest
    if: github.event_name != 'workflow_dispatch' || github.event.inputs.test_scenario == 'standard'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Need full history for git operations
          fetch-depth: 0
          # Use a token that can push to the repository
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build and package action
        run: |
          npm run build
          npm run package

      - name: Create test task files
        run: |
          mkdir -p test-specs/test-spec-1
          mkdir -p test-specs/test-spec-2
          
          # Create test-spec-1 with mixed completion
          cat > test-specs/test-spec-1/tasks.md << 'EOF'
          # Test Spec 1 Implementation Plan
          
          - [x] 1. Setup completed
            - Initial project setup
            - _Requirements: 1.1_
          
          - [x] 2. Core functionality implemented
            - Main features working
            - _Requirements: 1.2, 2.1_
          
          - [ ] 3. Testing in progress
            - Unit tests needed
            - _Requirements: 3.1_
          
          - [ ] 4. Documentation pending
            - User docs needed
            - _Requirements: 4.1_
          EOF
          
          # Create test-spec-2 with all tasks completed
          cat > test-specs/test-spec-2/tasks.md << 'EOF'
          # Test Spec 2 Implementation Plan
          
          - [x] 1. Feature complete
            - All work done
            - _Requirements: 1.1_
          
          - [x] 2. Tests passing
            - All tests green
            - _Requirements: 2.1_
          EOF

      - name: Run the action
        id: test_action
        uses: ./
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'Test: Update Kiro task completion badges'
        env:
          KIRO_SPECS_DIRECTORY: 'test-specs'

      - name: Verify badge files were created
        run: |
          echo "Checking for badge files..."
          
          # Check global badge file
          if [ ! -f ".kiro/badge-data-all.json" ]; then
            echo "❌ Global badge file not found"
            exit 1
          fi
          echo "✅ Global badge file found"
          
          # Check individual spec badge files
          if [ ! -f ".kiro/test-spec-1-badge-data.json" ]; then
            echo "❌ test-spec-1 badge file not found"
            exit 1
          fi
          echo "✅ test-spec-1 badge file found"
          
          if [ ! -f ".kiro/test-spec-2-badge-data.json" ]; then
            echo "❌ test-spec-2 badge file not found"
            exit 1
          fi
          echo "✅ test-spec-2 badge file found"

      - name: Validate JSON structure
        run: |
          echo "Validating JSON structure..."
          
          # Validate global badge
          global_json=$(cat .kiro/badge-data-all.json)
          echo "Global badge JSON: $global_json"
          
          # Check required fields exist
          echo "$global_json" | jq -e '.schemaVersion == 1' || (echo "❌ Invalid schemaVersion in global badge" && exit 1)
          echo "$global_json" | jq -e '.label == "All Kiro Tasks"' || (echo "❌ Invalid label in global badge" && exit 1)
          echo "$global_json" | jq -e '.message | test("^[0-9]+/[0-9]+$")' || (echo "❌ Invalid message format in global badge" && exit 1)
          echo "$global_json" | jq -e '.color | test("^(brightgreen|yellow|red)$")' || (echo "❌ Invalid color in global badge" && exit 1)
          
          # Expected: 4/6 tasks completed (2+2 completed / 4+2 total), should be yellow
          echo "$global_json" | jq -e '.message == "4/6"' || (echo "❌ Expected message '4/6' in global badge" && exit 1)
          echo "$global_json" | jq -e '.color == "yellow"' || (echo "❌ Expected color 'yellow' in global badge" && exit 1)
          
          # Validate test-spec-1 badge (2/4 completed, should be yellow)
          spec1_json=$(cat .kiro/test-spec-1-badge-data.json)
          echo "test-spec-1 badge JSON: $spec1_json"
          echo "$spec1_json" | jq -e '.label == "test-spec-1 Kiro Tasks"' || (echo "❌ Invalid label in test-spec-1 badge" && exit 1)
          echo "$spec1_json" | jq -e '.message == "2/4"' || (echo "❌ Expected message '2/4' in test-spec-1 badge" && exit 1)
          echo "$spec1_json" | jq -e '.color == "yellow"' || (echo "❌ Expected color 'yellow' in test-spec-1 badge" && exit 1)
          
          # Validate test-spec-2 badge (2/2 completed, should be brightgreen)
          spec2_json=$(cat .kiro/test-spec-2-badge-data.json)
          echo "test-spec-2 badge JSON: $spec2_json"
          echo "$spec2_json" | jq -e '.label == "test-spec-2 Kiro Tasks"' || (echo "❌ Invalid label in test-spec-2 badge" && exit 1)
          echo "$spec2_json" | jq -e '.message == "2/2"' || (echo "❌ Expected message '2/2' in test-spec-2 badge" && exit 1)
          echo "$spec2_json" | jq -e '.color == "brightgreen"' || (echo "❌ Expected color 'brightgreen' in test-spec-2 badge" && exit 1)
          
          echo "✅ All JSON files are valid"

      - name: Test Shields.io URL format
        run: |
          echo "Testing Shields.io URL format..."
          
          # Test that the JSON can be used with Shields.io
          # This simulates what Shields.io would do when fetching the JSON
          
          repo_url="https://raw.githubusercontent.com/${{ github.repository }}/${{ github.ref_name }}"
          
          echo "Global badge URL would be:"
          echo "https://img.shields.io/endpoint?url=${repo_url}/.kiro/badge-data-all.json"
          
          echo "Spec badge URLs would be:"
          echo "https://img.shields.io/endpoint?url=${repo_url}/.kiro/test-spec-1-badge-data.json"
          echo "https://img.shields.io/endpoint?url=${repo_url}/.kiro/test-spec-2-badge-data.json"

      - name: Clean up test files
        if: always()
        run: |
          # Remove test files to avoid committing them
          rm -rf test-specs
          rm -f .kiro/badge-data-all.json
          rm -f .kiro/test-spec-1-badge-data.json
          rm -f .kiro/test-spec-2-badge-data.json

  test-action-force-commit:
    name: Test Action - Force Commit
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.test_scenario == 'force_commit'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24'
          cache: 'npm'

      - name: Install dependencies and build
        run: |
          npm ci
          npm run build
          npm run package

      - name: Create test scenario with changes
        run: |
          mkdir -p test-specs/force-test-spec
          
          cat > test-specs/force-test-spec/tasks.md << 'EOF'
          # Force Test Implementation Plan
          
          - [x] 1. This will force a commit
            - Testing forced commit scenario
            - _Requirements: 1.1_
          EOF

      - name: Run action with force commit
        uses: ./
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'Test: Force commit badge update'
        env:
          KIRO_SPECS_DIRECTORY: 'test-specs'

      - name: Verify commit was made
        run: |
          # Check if badge files exist
          if [ ! -f ".kiro/badge-data-all.json" ]; then
            echo "❌ Badge files were not created"
            exit 1
          fi
          
          echo "✅ Force commit test completed successfully"

      - name: Clean up
        if: always()
        run: |
          rm -rf test-specs
          # Note: We keep the badge files as they were committed

  test-action-dry-run:
    name: Test Action - Dry Run
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.test_scenario == 'dry_run'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24'
          cache: 'npm'

      - name: Install dependencies and build
        run: |
          npm ci
          npm run build
          npm run package

      - name: Create test task files
        run: |
          mkdir -p test-specs/dry-run-spec
          
          cat > test-specs/dry-run-spec/tasks.md << 'EOF'
          # Dry Run Test Implementation Plan
          
          - [x] 1. Dry run test
            - Testing without commit
            - _Requirements: 1.1_
          
          - [ ] 2. Another task
            - Not completed
            - _Requirements: 1.2_
          EOF

      - name: Test action components individually
        run: |
          echo "Testing individual components..."
          
          # Test that we can import and use the components
          node -e "
            const { TaskScanner } = require('./dist/task-scanner');
            const { JSONGenerator } = require('./dist/json-generator');
            
            console.log('✅ Components can be imported successfully');
            
            // Test basic functionality without git operations
            const scanner = new TaskScanner('test-specs');
            const generator = new JSONGenerator();
            
            console.log('✅ Components can be instantiated');
          "

      - name: Validate action.yml
        run: |
          echo "Validating action.yml structure..."
          
          # Check that action.yml has required fields
          if ! grep -q "name:" action.yml; then
            echo "❌ action.yml missing name field"
            exit 1
          fi
          
          if ! grep -q "description:" action.yml; then
            echo "❌ action.yml missing description field"
            exit 1
          fi
          
          if ! grep -q "runs:" action.yml; then
            echo "❌ action.yml missing runs field"
            exit 1
          fi
          
          if ! grep -q "main: 'dist/index.js'" action.yml; then
            echo "❌ action.yml not pointing to correct main file"
            exit 1
          fi
          
          echo "✅ action.yml structure is valid"

      - name: Clean up
        if: always()
        run: |
          rm -rf test-specs

  test-edge-cases:
    name: Test Edge Cases
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24'
          cache: 'npm'

      - name: Install dependencies and build
        run: |
          npm ci
          npm run build
          npm run package

      - name: Test with no specs directory
        run: |
          echo "Testing with no test-specs directory..."
          
          # Set environment variable to use test directory
          export KIRO_SPECS_DIRECTORY="test-specs-missing"
          
          # Run action - should handle gracefully
          ./dist/index.js || echo "Action completed with no specs"

      - name: Test with empty specs directory
        run: |
          echo "Testing with empty specs directory..."
          
          # Create empty specs directory
          mkdir -p test-specs-empty
          
          # Set environment variable and test
          export KIRO_SPECS_DIRECTORY="test-specs-empty"
          ./dist/index.js || echo "Action completed with empty specs"
          
          echo "✅ Empty directory test complete"

      - name: Test with malformed task files
        run: |
          echo "Testing with malformed task files..."
          
          mkdir -p test-specs-malformed/malformed-spec
          
          # Create malformed task file
          cat > test-specs-malformed/malformed-spec/tasks.md << 'EOF'
          # Malformed Task File
          
          - [x] 1. Valid task
          - [ 2. Missing closing bracket
          - [invalid] 3. Invalid checkbox state
          - [] 4. Empty checkbox
          - [x 5. Missing closing bracket
          EOF
          
          # Test with malformed files
          export KIRO_SPECS_DIRECTORY="test-specs-malformed"
          ./dist/index.js || echo "Action completed with malformed specs"
          
          echo "✅ Malformed task file test complete"

      - name: Clean up edge case tests
        if: always()
        run: |
          rm -rf test-specs-malformed
          rm -rf test-specs-empty